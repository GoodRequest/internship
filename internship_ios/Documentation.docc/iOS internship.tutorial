@Tutorials(name: "iOS Internship") {
    @Intro(title: "Welcome to GoodRequest iOS Internship program") {
        You will learn the basics of iOS mobile development
    }
     
     @Volume(name: "Semester work") {
         Create a single-screen weather forecast application that displays the current weather at the selected location. The application will use free to use and publicly available API. Get the necessary data from the API and then present it. 
                                                                                          
         <doc:Assignment>
                  
         @Image(source: "hello2.png", alt: "GoodRequest Logo")

    @Chapter(name: "Getting Started") {
        In the first week, we will take a look at iOS development basics. For those without Macbook and macOS experience, it will be about getting in touch with the operation system and preparing everything for development.
        
        We will present to you something about our company, how we work and how we build the biggest mobile applications in the Slovak market.
        
        @Image(source: "basics.png", alt: "Basics image")
        
        @TutorialReference(tutorial: "doc:Week1")
    }
    
    @Chapter(name: "Swift") {
        Since all you have programming experience, especially with Object-Oriented programming languages we will skip the basics and jump into Swift programming language and its syntax.
        
        @Image(source: "swift.png", alt: "Basics image")
        
        @TutorialReference(tutorial: "doc:Week2")
    }
    
    @Chapter(name: "User interface") {
        We will focus on UI. Interface and design are the most important in our applications because that’s what users see and can interact with. We are building responsive applications for all iPhone and iPad sizes with a single implementation using AutoLayout.
        
        We will get in touch with basic UI components, fonts, colors and constraints.
        
        @Image(source: "ui.png", alt: "UI image")
        
        @TutorialReference(tutorial: "doc:Week3")
    }
    
    @Chapter(name: "TableView") {
        TableView is not only UI component but also our guide to understanding the Delegation pattern and how UI reload is handled in native API. We don’t want to implement 6 same UI elements for every day, but one reusable. Our goal will be to finish the UI of this screen and prepare our implementation for the logic part.
        
        @Image(source: "tableview.png", alt: "TableView image")
        
        @TutorialReference(tutorial: "doc:Week4")
    }
    
    @Chapter(name: "Location") {
        Now we have our screen ready for some logic. The first thing when we want to show the weather for the current location is to receive the current location. Native API offers `CoreLocation` framework with simple implementation and requesting user’s location. We will discuss the security and the process of allowing this feature. Then we will parse Coordinates, City and Country. Coords will be used for API and City for UI.
        
        @Image(source: "location.png", alt: "location image")
        
        @TutorialReference(tutorial: "doc:Week5")
    }
    
    @Chapter(name: "Libraries") {
        There are a few options for adding dependencies to the Xcode project. We will take a look at Cocoapods and Swift Package Manager. We are trying to minimalize dependencies, but there are still some Core SDKs we love working with. One of them is Alamofire, the network manager that handles a lot of cases for us.
        
        @Image(source: "libraries.png", alt: "libraries image")
        
        @TutorialReference(tutorial: "doc:Week6")
    }
    
    @Chapter(name: "API") {
        The final piece of this programming puzzle is API. Working with a server is an essential thing on every our application. We will focus on REST API and JSON response, how to download this base on parameters and how to parse this massive data into a simple object in Swift.        
        @Image(source: "api.png", alt: "API image")
        
        @TutorialReference(tutorial: "doc:Week7")
    }
    
    @Chapter(name: "Finalizing") {
        Now we should be able to put it all together. Our application after launch receives location and coordinates, fetches JSON data from OpenWeather API, parses it and presents it on our pixel-perfect UI. Now we can add some loading indicator when we are waiting for the response. 
        
        @Image(source: "done.png", alt: "API image")
        @TutorialReference(tutorial: "doc:Week8")
    }

    }
}
